@page "/admin/blogposts/new"
@page "/admin/blogposts/{Id}"
@inject IBlogService _service
@inject NavigationManager _manager


<EditForm Model="Post" OnValidSubmit="SavePost">
    <DataAnnotationsValidator />
    <CustomCssClassProvider ProviderType="BootstrapFieldCssClassProvider" />
    <BlogNavigationLock @ref="NavigationLock" />

    <InputText @bind-Value="Post.Title" />
    <ValidationMessage For="()=>Post.Title" />

    <InputDate @bind-Value="Post.PublishDate" />
    <ValidationMessage For="()=>Post.PublishDate" />

    <InputSelect @bind-Value="selectedCategory">
        <option value="0" disabled>None selected</option>

        @foreach (var category in Categories)
        {
            <option value="@category.Id">@category.Name </option>
        }
    </InputSelect>

    <ul>
        @foreach (var tag in Tags)
        {
            <li>
                @tag.Name
                @if (Post.Tags.Any(t => t.Id == tag.Id))
                {
                    <button type="button" @onclick="@(() => {Post.Tags.Remove(Post.Tags.Single(t=>t.Id==tag.Id)); })">Remove</button>
                }
                else
                {
                    <button type="button" @onclick="@(()=> { Post.Tags.Add(tag); })">Add</button>
                }
            </li>
        }
    </ul>
    <InputTextArea @bind-Value="Post.Text"/>
    <ValidationMessage For="()=>Post.Text" />

    <button type="submit" class="btn btn-success">Save</button>
</EditForm>

@code {
    [Parameter]
    public string? Id { get; set; }
    BlogPost Post { get; set; } = new();
    List<Category> Categories { get; set; } = new();
    List<Tag> Tags { get; set; } = new();
    string? selectedCategory = null;
    BlogNavigationLock? NavigationLock { get; set; }


    public async Task SavePost()
    {
        if (!string.IsNullOrEmpty(selectedCategory) && Categories != null)
        {
            var category = Categories.FirstOrDefault(c => c.Id == selectedCategory);
            if (category != null)
            {
                Post.Category = category;
            }
        }
        await _service.SaveBlogPostAsync(Post);
        NavigationLock?.CurrentEditContext.MarkAsUnmodified();
        _manager.NavigateTo("/admin/blogposts");
    }

    bool hasTag(Tag tag)
    {
        return Post.Tags.Contains(tag);
    }
    protected override async Task OnParametersSetAsync()
    {
        if (Id != null)
        {
            var p = await _service.GetBlogPostAsync(Id);
            if (p != null)
            {
                Post = p;
                if (Post.Category != null)
                {
                    selectedCategory = Post.Category.Id;
                }
            }
        }
        Categories = (await _service.GetCategoriesAsync()) ?? new();
        Tags = (await _service.GetTagsAsync()) ?? new();
        base.OnParametersSet();
    }

}